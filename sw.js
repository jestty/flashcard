// ‚ö° T√™n cache ‚Äî b·∫°n c√≥ th·ªÉ tƒÉng version n·∫øu mu·ªën reload l·∫°i to√†n b·ªô
const CACHE_NAME = 'myapp-cache-v2';

// ‚öôÔ∏è Danh s√°ch file c·∫ßn cache
const urlsToCache = [
  './',
  './index.html',
  './style.css',
  './script.js',
  './icon-192.png',
  './manifest.json'
];

// üß± C√†i ƒë·∫∑t service worker ‚Äî cache t·∫•t c·∫£ file c·∫ßn thi·∫øt
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
      .then(() => self.skipWaiting())
  );
});

// üßπ K√≠ch ho·∫°t ‚Äî x√≥a cache c≈© (n·∫øu c√≥ version kh√°c)
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then(keys =>
      Promise.all(keys.map(key => {
        if (key !== CACHE_NAME) return caches.delete(key);
      }))
    )
  );
  self.clients.claim();
});

// üöÄ Fetch event ‚Äî ∆∞u ti√™n cache, c·∫≠p nh·∫≠t n·ªÅn khi c√≥ m·∫°ng
self.addEventListener('fetch', (event) => {
  // B·ªè qua c√°c request kh√¥ng ph·∫£i GET (POST/PUT...)
  if (event.request.method !== 'GET') return;

  event.respondWith(
    caches.match(event.request)
      .then(cachedResponse => {
        // N·∫øu c√≥ cache ‚Äî tr·∫£ ngay cache ra (t·ª©c th√¨)
        if (cachedResponse) {
          // C·∫≠p nh·∫≠t l·∫°i trong n·ªÅn (n·∫øu c√≥ m·∫°ng)
          fetch(event.request)
            .then(networkResponse => {
              if (networkResponse.ok) {
                caches.open(CACHE_NAME)
                  .then(cache => cache.put(event.request, networkResponse.clone()));
              }
            })
            .catch(() => {}); // B·ªè qua l·ªói m·∫°ng
          return cachedResponse;
        }

        // N·∫øu ch∆∞a c√≥ cache ‚Äî c·ªë l·∫•y t·ª´ m·∫°ng
        return fetch(event.request)
          .then(networkResponse => {
            if (networkResponse.ok) {
              const clone = networkResponse.clone();
              caches.open(CACHE_NAME).then(cache => cache.put(event.request, clone));
            }
            return networkResponse;
          })
          .catch(() => new Response('‚ö†Ô∏è Offline ‚Äî d·ªØ li·ªáu ch∆∞a c√≥ trong cache.'));
      })
  );
});
